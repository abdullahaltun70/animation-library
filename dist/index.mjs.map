{"version":3,"sources":["../src/hooks/useAnimation.ts","../src/components/Animate.tsx"],"names":["DEFAULTS","useAnimation","config","type","duration","delay","easing","distance","degrees","scale","opacity","axis","opacityStart","opacityEnd","key","setKey","useState","elementRef","useRef","getAnimationClass","useCallback","effectiveDistance","startRotation","useEffect","element","animationClass","classesToRemove","cls","validateTime","validateOpacity","distanceValue","endRotation","scaleValue","replay","prevKey","value","defaultValue","numValue","Animate","forwardRef","children","Component","className","onAnimationComplete","props","forwardedRef","animationConfig","ref","setRefs","handleAnimationEnd","e","combinedClassName","React"],"mappings":"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","file":"index.mjs","sourcesContent":["\"use client\";\n\nimport { AnimationConfig, SlideAxis } from \"@/types/index\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nexport interface UseAnimationReturn<T extends HTMLElement> {\n  ref: React.RefObject<T | null>;\n  key: number; // Key to force re-render and replay animation\n  replay: () => void; // Function to manually replay the animation\n}\n\nconst DEFAULTS = {\n  duration: 0.5,\n  delay: 0,\n  easing: \"ease-out\",\n  opacityStart: 0,\n  opacityEnd: 1,\n  distance: 50,\n  degrees: 360, // Default end rotation\n  degreesStart: 0, // Default start rotation\n  scale: 0.8,\n  ax: \"x\" as SlideAxis, // Default axis for slide animations\n};\n\n/**\n * Custom hook to apply CSS animations based on configuration.\n * Returns a ref to attach to the target element, a key for re-renders, and a replay function.\n */\nexport function useAnimation<T extends HTMLElement>(\n  config: AnimationConfig\n): UseAnimationReturn<T> {\n  const {\n    type,\n    duration = DEFAULTS.duration,\n    delay = DEFAULTS.delay,\n    easing = DEFAULTS.easing,\n    distance = DEFAULTS.distance,\n    degrees = DEFAULTS.degrees, // Default to simple number or object with end\n    scale = DEFAULTS.scale,\n    opacity = {\n      start: DEFAULTS.opacityStart,\n      end: DEFAULTS.opacityEnd,\n    },\n    axis = DEFAULTS.ax, // Default axis for slide animations\n  } = config;\n\n  const {\n    start: opacityStart = DEFAULTS.opacityStart,\n    end: opacityEnd = DEFAULTS.opacityEnd,\n  } = opacity;\n\n  const [key, setKey] = useState(0);\n  const elementRef = useRef<T>(null);\n\n  // Memoize the function to get the correct animation class WITH direction\n  const getAnimationClass = useCallback((): string => {\n    switch (type) {\n      case \"fade\":\n        return \"animate-fade\";\n      case \"slide\": {\n        const effectiveDistance = distance ?? DEFAULTS.distance;\n        if (axis === \"y\") {\n          return effectiveDistance >= 0\n            ? \"animate-slide-y-positive\"\n            : \"animate-slide-y-negative\";\n        }\n        return effectiveDistance >= 0\n          ? \"animate-slide-x-positive\"\n          : \"animate-slide-x-negative\";\n      }\n      case \"scale\":\n        return \"animate-scale\";\n      case \"rotate\": {\n        // Rotation direction is determined by whether end > start\n        // If only a number is provided for degrees, it's treated as the end value, starting from 0 or DEFAULTS.degreesStart\n        const startRotation =\n          typeof degrees === \"object\"\n            ? degrees.start ?? DEFAULTS.degreesStart\n            : DEFAULTS.degreesStart;\n        const endRotation = typeof degrees === \"object\" ? degrees.end : degrees;\n        return endRotation >= startRotation\n          ? \"animate-rotate-positive\"\n          : \"animate-rotate-negative\";\n      }\n      case \"bounce\": {\n        // Using distance sign for bounce direction (positive=up, negative=down)\n        const effectiveDistance = distance ?? DEFAULTS.distance;\n        return effectiveDistance >= 0\n          ? \"animate-bounce-positive\"\n          : \"animate-bounce-negative\";\n      }\n      default:\n        // Help TypeScript ensure all cases are handled\n        const _exhaustiveCheck: never = type;\n        console.warn(`Unknown animation type: ${type}`);\n        return \"\";\n    }\n  }, [type, distance, degrees, axis]);\n\n  // Effect to apply styles and classes\n  useEffect(() => {\n    const element = elementRef.current;\n    if (!element) return;\n\n    const animationClass = getAnimationClass();\n    if (!animationClass) return;\n\n    // --- Clean up previous classes ---\n    const classesToRemove = Array.from(element.classList).filter((cls) =>\n      cls.startsWith(\"animate-\")\n    );\n    if (classesToRemove.length > 0) {\n      element.classList.remove(...classesToRemove);\n    }\n\n    // --- Apply new class ---\n    // Force reflow before adding class might be needed in some edge cases for replay,\n    // but key-based re-render often suffices.\n    // void element.offsetWidth; // Example reflow trigger (use cautiously)\n    element.classList.add(animationClass);\n\n    // --- Set CSS Custom Properties ---\n    // Ensure values are valid numbers before setting\n    element.style.setProperty(\n      \"--animation-duration\",\n      `${validateTime(duration, DEFAULTS.duration)}s`\n    );\n    element.style.setProperty(\n      \"--animation-delay\",\n      `${validateTime(delay, DEFAULTS.delay)}s`\n    );\n    element.style.setProperty(\"--animation-easing\", easing);\n\n    // Type-specific properties - use ABSOLUTE values for magnitude variables\n    if (type === \"fade\") {\n      element.style.setProperty(\n        \"--opacity-start\",\n        validateOpacity(opacityStart).toString()\n      );\n      element.style.setProperty(\n        \"--opacity-end\",\n        validateOpacity(opacityEnd).toString()\n      );\n    }\n\n    if (type === \"slide\" || type === \"bounce\") {\n      const distanceValue =\n        distance !== undefined ? distance : DEFAULTS.distance;\n      // **FIX**: Use absolute value for the CSS variable magnitude\n      element.style.setProperty(\"--distance\", `${Math.abs(distanceValue)}px`);\n    }\n\n    if (type === \"rotate\") {\n      const startRotation =\n        typeof degrees === \"object\" && degrees.start !== undefined\n          ? degrees.start\n          : DEFAULTS.degreesStart;\n      const endRotation = typeof degrees === \"object\" ? degrees.end : degrees;\n\n      element.style.setProperty(\"--degrees-start\", `${startRotation}deg`);\n      element.style.setProperty(\"--degrees-end\", `${endRotation}deg`);\n    }\n\n    if (type === \"scale\") {\n      const scaleValue = scale !== undefined ? scale : DEFAULTS.scale;\n      element.style.setProperty(\"--scale\", scaleValue.toString());\n    }\n\n    // Cleanup function\n    return () => {\n      if (elementRef.current) {\n        elementRef.current.classList.remove(animationClass);\n      }\n    };\n  }, [\n    key,\n    type,\n    duration,\n    delay,\n    easing,\n    distance,\n    degrees,\n    scale,\n    opacityStart,\n    opacityEnd,\n    getAnimationClass,\n    axis,\n  ]);\n\n  const replay = useCallback(() => {\n    setKey((prevKey) => prevKey + 1);\n  }, []);\n\n  return { ref: elementRef, key, replay };\n}\n\n// Helper validation functions\n/**\n * Validates if a value is a non-negative number, otherwise returns a default.\n * @param value The value to validate.\n * @param defaultValue The default value to return if validation fails.\n * @returns A valid non-negative number.\n */\nfunction validateTime(value: number | undefined, defaultValue: number): number {\n  return typeof value === \"number\" && value >= 0 ? value : defaultValue;\n}\n\n/**\n * Validates if a value is a number between 0 and 1 (inclusive) for opacity.\n * @param value The value to validate.\n * @returns A valid opacity value (0-1), or a default if invalid.\n */\nfunction validateOpacity(value: number): number {\n  // Ensure opacity is between 0 and 1\n  const numValue = typeof value === \"number\" ? value : NaN;\n  if (isNaN(numValue)) {\n    // Decide a default if value is invalid - depends if it's start or end\n    // Returning 0 here, but could be context-dependent (like DEFAULTS.opacityStart/End)\n    return 0;\n  }\n  return Math.max(0, Math.min(1, numValue));\n}\n","\"use client\";\n\n// src/components/Animate.tsx\nimport React, { forwardRef, HTMLAttributes, JSX, ReactNode } from \"react\";\nimport { useAnimation } from \"@/hooks/useAnimation\";\nimport { AnimationConfig, AnimationType, SlideAxis } from \"@/types/index\";\n\n// Props for the Animate component\ninterface AnimateProps extends HTMLAttributes<HTMLDivElement> {\n  children: ReactNode;\n  type: AnimationType;\n  duration?: number;\n  delay?: number;\n  easing?: string;\n  distance?: number;\n  degrees?: number;\n  scale?: number;\n  opacity?: {\n    start?: number;\n    end?: number;\n  };\n  axis?: SlideAxis; // Add this for slide animation\n  as?: keyof JSX.IntrinsicElements | React.ComponentType<any>;\n  className?: string;\n  onAnimationComplete?: () => void;\n}\n\n/**\n * A wrapper component to easily apply animations using the useAnimation hook.\n * Supports forwarding refs and can render as any HTML element or component.\n *\n * @property {ReactNode} children - The content to animate.\n * @property {AnimationType} type - The type of animation to apply (e.g., \"fade\", \"slide\").\n * @property {number} [duration] - Duration of the animation in seconds.\n * @property {number} [delay] - Delay before the animation starts in seconds.\n * @property {string} [easing] - Easing function for the animation.\n * @property {number} [distance] - Distance for slide or bounce animations.\n * @property {number} [degrees] - Degrees for rotate animations.\n * @property {number} [scale] - Scale factor for scale animations.\n * @property {object} [opacity] - Opacity settings for fade animations (e.g., `{ start: 0, end: 1 }`).\n * @property {SlideAxis} [axis] - Axis for slide animations ('x' or 'y', defaults to 'x').\n * @property {keyof JSX.IntrinsicElements | React.ComponentType<any>} [as] - The HTML element or component to render as.\n * @property {string} [className] - Additional CSS classes to apply.\n * @property {function} [onAnimationComplete] - Callback function when the animation completes.\n *\n * @example\n * <Animate\n *   type=\"fade\"\n *   duration={0.5}\n *   className=\"my-custom-class\"\n * >\n *   <p>Content to animate</p>\n * </Animate>\n */\nexport const Animate = forwardRef<HTMLDivElement, AnimateProps>(\n  (\n    {\n      children,\n      as: Component = \"div\",\n      className = \"\",\n      onAnimationComplete,\n      // Animation config props\n      type,\n      duration,\n      delay,\n      easing,\n      distance,\n      degrees,\n      scale,\n      opacity,\n      axis, // Destructured axis for slide animation\n      ...props\n    },\n    forwardedRef\n  ) => {\n    // Create animation config object from props\n    const animationConfig: AnimationConfig = {\n      type,\n      duration,\n      delay,\n      easing,\n      distance,\n      degrees,\n      scale,\n      opacity,\n      axis, // Pass axis to config\n    };\n\n    // Use the animation hook\n    const { ref, key } = useAnimation<HTMLDivElement>(animationConfig);\n\n    // Combine the refs\n    const setRefs = (element: HTMLDivElement | null) => {\n      // Set the local ref from useAnimation\n      if (typeof ref === \"object\" && ref !== null) {\n        (ref as React.RefObject<HTMLDivElement | null>).current = element;\n      }\n\n      // Set the forwarded ref\n      if (forwardedRef) {\n        if (typeof forwardedRef === \"function\") {\n          forwardedRef(element);\n        } else {\n          (forwardedRef as React.RefObject<HTMLDivElement | null>).current =\n            element;\n        }\n      }\n    };\n\n    // Handle animation end event\n    const handleAnimationEnd = (e: React.AnimationEvent<HTMLDivElement>) => {\n      // Only trigger if it's the main animation ending, not child animations\n      if (e.target === ref.current) {\n        onAnimationComplete?.();\n      }\n\n      // Call the original onAnimationEnd if provided in props\n      props.onAnimationEnd?.(e);\n    };\n\n    // Create combined className\n    const combinedClassName = `animated ${className}`.trim();\n\n    // Use createElement to properly handle the dynamic component type\n    return React.createElement(\n      Component,\n      {\n        ...props,\n        ref: setRefs,\n        className: combinedClassName,\n        key, // Key helps force re-animation\n        onAnimationEnd: handleAnimationEnd,\n        // Add data attributes for potential debugging/testing\n        \"data-animation-type\": type,\n        \"data-animation-duration\": duration ?? 0.5,\n        \"data-animation-delay\": delay ?? 0,\n      },\n      children\n    );\n  }\n);\n\nAnimate.displayName = \"Animate\";\n\nexport default Animate;\n"]}