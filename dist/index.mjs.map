{"version":3,"sources":["../src/hooks/useAnimation.ts","../src/components/Animate.tsx"],"names":["DEFAULTS","useAnimation","config","onAnimationComplete","type","configDuration","configDelay","configEasing","configDistance","configDegrees","configScale","configOpacity","configAxis","duration","validateTime","delay","easing","distance","scale","axis","opacity","validateOpacity","key","setKey","useState","elementRef","useRef","animationTimerRef","handleAnimationEndEvent","useCallback","event","useEffect","node","cls","endDeg","animationClass","directionSuffix","currentNode","replay","prevKey","value","defaultValue","numValue","Animate","forwardRef","children","Component","className","degrees","props","forwardedRef","animationConfig","ref","setRefs","element","handleAnimationEnd","e","combinedClassName","React"],"mappings":"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","file":"index.mjs","sourcesContent":["\"use client\";\n\nimport { AnimationConfig, SlideAxis } from \"@/types/index\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nexport interface UseAnimationReturn<T extends HTMLElement> {\n  ref: React.RefObject<T | null>;\n  key: number; // Key to force re-render and replay animation\n  replay: () => void; // Function to manually replay the animation\n}\n\nconst DEFAULTS = {\n  duration: 0.5,\n  delay: 0,\n  easing: \"ease-out\",\n  opacityStart: 0,\n  opacityEnd: 1,\n  distance: 50,\n  degrees: 360, // Default end rotation for one-shot keyframe animation\n  degreesStart: 0, // Default start rotation for one-shot keyframe animation\n  scale: 0.8,\n  axis: \"x\" as SlideAxis, // Changed from ax to axis\n};\n\n/**\n * Custom hook to apply CSS animations based on configuration.\n * Returns a ref to attach to the target element, a key for re-renders, and a replay function.\n */\nexport function useAnimation<T extends HTMLElement>(\n  config: AnimationConfig,\n  onAnimationComplete?: (event: Event) => void\n): UseAnimationReturn<T> {\n  const {\n    type,\n    duration: configDuration,\n    delay: configDelay,\n    easing: configEasing,\n    distance: configDistance,\n    degrees: configDegrees,\n    scale: configScale,\n    opacity: configOpacity,\n    axis: configAxis,\n  } = config;\n\n  const duration = validateTime(configDuration, DEFAULTS.duration);\n  const delay = validateTime(configDelay, DEFAULTS.delay);\n  const easing = configEasing || DEFAULTS.easing;\n  const distance = configDistance ?? DEFAULTS.distance;\n  const scale = configScale ?? DEFAULTS.scale;\n  const axis = configAxis || DEFAULTS.axis;\n  const opacity = {\n    start: validateOpacity(configOpacity?.start, DEFAULTS.opacityStart),\n    end: validateOpacity(configOpacity?.end, DEFAULTS.opacityEnd),\n  };\n\n  const [key, setKey] = useState(0);\n  const elementRef = useRef<T>(null);\n  const animationTimerRef = useRef<ReturnType<typeof setTimeout> | null>(null); // Ref for the animation timer\n\n  const handleAnimationEndEvent = useCallback(\n    (event: Event) => {\n      if (event.target === elementRef.current && onAnimationComplete) {\n        onAnimationComplete(event);\n        // Remove listener after execution\n        if (event.type === \"animationend\") {\n          elementRef.current?.removeEventListener(\n            \"animationend\",\n            handleAnimationEndEvent\n          );\n        } else if (event.type === \"transitionend\") {\n          elementRef.current?.removeEventListener(\n            \"transitionend\",\n            handleAnimationEndEvent\n          );\n        }\n      }\n    },\n    [onAnimationComplete]\n  );\n\n  useEffect(() => {\n    const node = elementRef.current;\n    if (!node) return;\n\n    // Clear any previous animation/transition related styles and classes\n    node.style.transition = \"\";\n    node.style.transform = \"\"; // Reset transform if switching types\n    const classesToRemove = Array.from(node.classList).filter((cls) =>\n      cls.startsWith(\"animate-\")\n    );\n    classesToRemove.forEach((cls) => node.classList.remove(cls));\n\n    // Remove previous listeners to avoid multiple calls\n    node.removeEventListener(\"animationend\", handleAnimationEndEvent);\n    node.removeEventListener(\"transitionend\", handleAnimationEndEvent);\n\n    // Clear any pending animation timer from previous effect run\n    if (animationTimerRef.current) {\n      clearTimeout(animationTimerRef.current);\n    }\n\n    if (type === \"rotate\") {\n      let endDeg = DEFAULTS.degreesStart; // Default to start, effectively no rotation\n      if (typeof configDegrees === \"number\") {\n        endDeg = configDegrees;\n      } else if (configDegrees && typeof configDegrees.end === \"number\") {\n        endDeg = configDegrees.end;\n      }\n      // configDegrees.start is ignored for dynamic transitions, which animate from current value.\n\n      node.style.transition = `transform ${duration}s ${easing} ${delay}s`;\n      node.style.transform = `rotate(${endDeg}deg)`;\n\n      if (onAnimationComplete) {\n        node.addEventListener(\"transitionend\", handleAnimationEndEvent);\n      }\n    } else {\n      // Logic for class-based animations (fade, slide, scale, bounce)\n      let animationClass = `animate-${type}`; // Base class like animate-fade, animate-scale\n\n      if (type === \"slide\") {\n        const directionSuffix = distance >= 0 ? \"positive\" : \"negative\";\n        animationClass = `animate-${type}-${axis}-${directionSuffix}`;\n      } else if (type === \"bounce\") {\n        const directionSuffix = distance >= 0 ? \"positive\" : \"negative\";\n        animationClass = `animate-${type}-${directionSuffix}`;\n      }\n\n      // Apply CSS custom properties for keyframe-based animations\n      node.style.setProperty(\"--animation-duration\", `${duration}s`);\n      node.style.setProperty(\"--animation-delay\", `${delay}s`);\n      node.style.setProperty(\"--animation-easing\", easing);\n\n      if (type === \"fade\") {\n        node.style.setProperty(\"--opacity-start\", `${opacity.start}`);\n        node.style.setProperty(\"--opacity-end\", `${opacity.end}`);\n      }\n      if (type === \"slide\") {\n        node.style.setProperty(\"--distance\", `${Math.abs(distance)}px`);\n        node.style.setProperty(\"--opacity-start\", `${opacity.start}`);\n        node.style.setProperty(\"--opacity-end\", `${opacity.end}`);\n      }\n      if (type === \"scale\") {\n        node.style.setProperty(\"--scale\", `${scale}`);\n        node.style.setProperty(\"--opacity-start\", `${opacity.start}`);\n        node.style.setProperty(\"--opacity-end\", `${opacity.end}`);\n      }\n      if (type === \"bounce\") {\n        node.style.setProperty(\"--distance\", `${distance}px`);\n        node.style.setProperty(\"--opacity-start\", `${opacity.start}`);\n        node.style.setProperty(\"--opacity-end\", `${opacity.end}`);\n      }\n\n      if (animationClass) {\n        // Initial reflow after properties are set and old classes are removed (done at the top of useEffect)\n        void node.offsetWidth;\n\n        animationTimerRef.current = window.setTimeout(() => {\n          const currentNode = elementRef.current;\n          if (currentNode) {\n            // More forceful animation reset\n            currentNode.style.animation = \"none\"; // 1. Temporarily disable animations\n\n            void currentNode.offsetWidth; // 2. Force reflow\n\n            currentNode.style.animation = \"\"; // 3. Clear the inline style so class animation can apply\n\n            // Add the class to trigger the animation\n            currentNode.classList.add(animationClass); // 4. Add class\n\n            if (onAnimationComplete) {\n              currentNode.addEventListener(\n                \"animationend\",\n                handleAnimationEndEvent\n              );\n            }\n          }\n        }, 20); // Increased delay slightly to 20ms\n      }\n    }\n\n    return () => {\n      // Cleanup listeners when effect re-runs or component unmounts\n      if (animationTimerRef.current) {\n        clearTimeout(animationTimerRef.current); // Clear the timer on cleanup\n      }\n      if (node) {\n        // node is from the useEffect closure\n        node.removeEventListener(\"animationend\", handleAnimationEndEvent);\n        node.removeEventListener(\"transitionend\", handleAnimationEndEvent);\n      }\n    };\n  }, [\n    type,\n    duration,\n    delay,\n    easing,\n    distance,\n    configDegrees, // Use configDegrees for rotate\n    scale,\n    opacity.start, // Use destructured and validated opacity values\n    opacity.end,\n    axis,\n    key,\n    onAnimationComplete,\n    handleAnimationEndEvent, // Added handleAnimationEndEvent\n  ]);\n\n  const replay = useCallback(() => {\n    setKey((prevKey) => prevKey + 1);\n  }, []);\n\n  return { ref: elementRef, key, replay };\n}\n\n// Helper validation functions\n/**\n * Validates if a value is a non-negative number, otherwise returns a default.\n * @param value The value to validate.\n * @param defaultValue The default value to return if validation fails.\n * @returns A valid non-negative number.\n */\nfunction validateTime(value: number | undefined, defaultValue: number): number {\n  // Ensure value is a number before checking if it's non-negative\n  const numValue = typeof value === \"number\" ? value : NaN;\n  if (!isNaN(numValue) && numValue >= 0) {\n    return numValue;\n  }\n  return defaultValue;\n}\n\n/**\n * Validates if a value is a number between 0 and 1 (inclusive) for opacity.\n * @param value The value to validate.\n * @param defaultValue The default value to use if value is not a number.\n * @returns A valid opacity value (0-1).\n */\nfunction validateOpacity(\n  value: number | undefined,\n  defaultValue: number\n): number {\n  const numValue = typeof value === \"number\" ? value : defaultValue;\n  // Ensure opacity is between 0 and 1 after defaulting\n  return Math.max(0, Math.min(1, numValue));\n}\n","\"use client\";\n\n// src/components/Animate.tsx\nimport React, { forwardRef, HTMLAttributes, JSX, ReactNode } from \"react\";\nimport { useAnimation } from \"@/hooks/useAnimation\";\nimport { AnimationConfig, AnimationType, SlideAxis } from \"@/types/index\";\n\n// Props for the Animate component\ninterface AnimateProps extends HTMLAttributes<HTMLDivElement> {\n  children: ReactNode;\n  type: AnimationType;\n  duration?: number;\n  delay?: number;\n  easing?: string;\n  distance?: number;\n  degrees?: number;\n  scale?: number;\n  opacity?: {\n    start?: number;\n    end?: number;\n  };\n  axis?: SlideAxis; // Add this for slide animation\n  as?: keyof JSX.IntrinsicElements | React.ComponentType<any>;\n  className?: string;\n  onAnimationComplete?: () => void;\n}\n\n/**\n * A wrapper component to easily apply animations using the useAnimation hook.\n * Supports forwarding refs and can render as any HTML element or component.\n *\n * @property {ReactNode} children - The content to animate.\n * @property {AnimationType} type - The type of animation to apply (e.g., \"fade\", \"slide\").\n * @property {number} [duration] - Duration of the animation in seconds.\n * @property {number} [delay] - Delay before the animation starts in seconds.\n * @property {string} [easing] - Easing function for the animation.\n * @property {number} [distance] - Distance for slide or bounce animations.\n * @property {number} [degrees] - Degrees for rotate animations.\n * @property {number} [scale] - Scale factor for scale animations.\n * @property {object} [opacity] - Opacity settings for fade animations (e.g., `{ start: 0, end: 1 }`).\n * @property {SlideAxis} [axis] - Axis for slide animations ('x' or 'y', defaults to 'x').\n * @property {keyof JSX.IntrinsicElements | React.ComponentType<any>} [as] - The HTML element or component to render as.\n * @property {string} [className] - Additional CSS classes to apply.\n * @property {function} [onAnimationComplete] - Callback function when the animation completes.\n *\n * @example\n * <Animate\n *   type=\"fade\"\n *   duration={0.5}\n *   className=\"my-custom-class\"\n * >\n *   {children}\n * </Animate>\n */\nexport const Animate = forwardRef<HTMLDivElement, AnimateProps>(\n  (\n    {\n      children,\n      as: Component = \"div\",\n      className = \"\",\n      onAnimationComplete,\n      // Animation config props\n      type,\n      duration,\n      delay,\n      easing,\n      distance,\n      degrees,\n      scale,\n      opacity,\n      axis, // Destructured axis for slide animation\n      ...props\n    },\n    forwardedRef\n  ) => {\n    // Create animation config object from props\n    const animationConfig: AnimationConfig = {\n      type,\n      duration,\n      delay,\n      easing,\n      distance,\n      degrees,\n      scale,\n      opacity,\n      axis, // Pass axis to config\n    };\n\n    // Use the animation hook\n    const { ref, key } = useAnimation<HTMLDivElement>(animationConfig);\n\n    // Combine the refs\n    const setRefs = (element: HTMLDivElement | null) => {\n      // Set the local ref from useAnimation\n      if (typeof ref === \"object\" && ref !== null) {\n        (ref as React.RefObject<HTMLDivElement | null>).current = element;\n      }\n\n      // Set the forwarded ref\n      if (forwardedRef) {\n        if (typeof forwardedRef === \"function\") {\n          forwardedRef(element);\n        } else {\n          (forwardedRef as React.RefObject<HTMLDivElement | null>).current =\n            element;\n        }\n      }\n    };\n\n    // Handle animation end event\n    const handleAnimationEnd = (e: React.AnimationEvent<HTMLDivElement>) => {\n      // Only trigger if it's the main animation ending, not child animations\n      if (e.target === ref.current) {\n        onAnimationComplete?.();\n      }\n\n      // Call the original onAnimationEnd if provided in props\n      props.onAnimationEnd?.(e);\n    };\n\n    // Create combined className\n    const combinedClassName = `animated ${className}`.trim();\n\n    // Use createElement to properly handle the dynamic component type\n    return React.createElement(\n      Component,\n      {\n        ...props,\n        ref: setRefs,\n        className: combinedClassName,\n        key, // Key helps force re-animation\n        onAnimationEnd: handleAnimationEnd,\n        // Add data attributes for potential debugging/testing\n        \"data-animation-type\": type,\n        \"data-animation-duration\": duration ?? 0.5,\n        \"data-animation-delay\": delay ?? 0,\n      },\n      children\n    );\n  }\n);\n\nAnimate.displayName = \"Animate\";\n\nexport default Animate;\n"]}