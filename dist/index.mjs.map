{"version":3,"sources":["../src/hooks/useAnimation.ts","../src/components/Animate.tsx"],"names":["DEFAULTS","useAnimation","config","onAnimationComplete","type","configDuration","configDelay","configEasing","configDistance","configDegrees","configScale","configOpacity","configAxis","duration","validateTime","delay","easing","distance","scale","axis","opacity","validateOpacity","key","setKey","useState","elementRef","useRef","handleAnimationEndEvent","useCallback","event","useEffect","node","cls","endDeg","animationClass","directionSuffix","replay","prevKey","value","defaultValue","numValue","Animate","forwardRef","children","Component","className","degrees","props","forwardedRef","animationConfig","ref","setRefs","element","handleAnimationEnd","e","combinedClassName","React"],"mappings":"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","file":"index.mjs","sourcesContent":["\"use client\";\n\nimport { AnimationConfig, SlideAxis } from \"@/types/index\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nexport interface UseAnimationReturn<T extends HTMLElement> {\n  ref: React.RefObject<T | null>;\n  key: number; // Key to force re-render and replay animation\n  replay: () => void; // Function to manually replay the animation\n}\n\nconst DEFAULTS = {\n  duration: 0.5,\n  delay: 0,\n  easing: \"ease-out\",\n  opacityStart: 0,\n  opacityEnd: 1,\n  distance: 50,\n  degrees: 360, // Default end rotation for one-shot keyframe animation\n  degreesStart: 0, // Default start rotation for one-shot keyframe animation\n  scale: 0.8,\n  axis: \"x\" as SlideAxis, // Changed from ax to axis\n};\n\n/**\n * Custom hook to apply CSS animations based on configuration.\n * Returns a ref to attach to the target element, a key for re-renders, and a replay function.\n */\nexport function useAnimation<T extends HTMLElement>(\n  config: AnimationConfig,\n  onAnimationComplete?: (event: Event) => void\n): UseAnimationReturn<T> {\n  const {\n    type,\n    duration: configDuration,\n    delay: configDelay,\n    easing: configEasing,\n    distance: configDistance,\n    degrees: configDegrees,\n    scale: configScale,\n    opacity: configOpacity,\n    axis: configAxis,\n  } = config;\n\n  const duration = validateTime(configDuration, DEFAULTS.duration);\n  const delay = validateTime(configDelay, DEFAULTS.delay);\n  const easing = configEasing || DEFAULTS.easing;\n  const distance = configDistance ?? DEFAULTS.distance;\n  const scale = configScale ?? DEFAULTS.scale;\n  const axis = configAxis || DEFAULTS.axis;\n  const opacity = {\n    start: validateOpacity(configOpacity?.start, DEFAULTS.opacityStart),\n    end: validateOpacity(configOpacity?.end, DEFAULTS.opacityEnd),\n  };\n\n  const [key, setKey] = useState(0);\n  const elementRef = useRef<T>(null);\n\n  const handleAnimationEndEvent = useCallback(\n    (event: Event) => {\n      if (event.target === elementRef.current && onAnimationComplete) {\n        onAnimationComplete(event);\n        // Remove listener after execution\n        if (event.type === \"animationend\") {\n          elementRef.current?.removeEventListener(\n            \"animationend\",\n            handleAnimationEndEvent\n          );\n        } else if (event.type === \"transitionend\") {\n          elementRef.current?.removeEventListener(\n            \"transitionend\",\n            handleAnimationEndEvent\n          );\n        }\n      }\n    },\n    [onAnimationComplete]\n  );\n\n  useEffect(() => {\n    const node = elementRef.current;\n    if (!node) return;\n\n    // Clear any previous animation/transition related styles and classes\n    node.style.transition = \"\";\n    node.style.transform = \"\"; // Reset transform if switching types\n    const classesToRemove = Array.from(node.classList).filter((cls) =>\n      cls.startsWith(\"animate-\")\n    );\n    classesToRemove.forEach((cls) => node.classList.remove(cls));\n\n    // Remove previous listeners to avoid multiple calls\n    node.removeEventListener(\"animationend\", handleAnimationEndEvent);\n    node.removeEventListener(\"transitionend\", handleAnimationEndEvent);\n\n    if (type === \"rotate\") {\n      let endDeg = DEFAULTS.degreesStart; // Default to start, effectively no rotation\n      if (typeof configDegrees === \"number\") {\n        endDeg = configDegrees;\n      } else if (configDegrees && typeof configDegrees.end === \"number\") {\n        endDeg = configDegrees.end;\n      }\n      // configDegrees.start is ignored for dynamic transitions, which animate from current value.\n\n      node.style.transition = `transform ${duration}s ${easing} ${delay}s`;\n      node.style.transform = `rotate(${endDeg}deg)`;\n\n      if (onAnimationComplete) {\n        node.addEventListener(\"transitionend\", handleAnimationEndEvent);\n      }\n    } else {\n      // Logic for class-based animations (fade, slide, scale, bounce)\n      let animationClass = `animate-${type}`; // Base class like animate-fade, animate-scale\n\n      if (type === \"slide\") {\n        const directionSuffix = distance >= 0 ? \"positive\" : \"negative\";\n        animationClass = `animate-${type}-${axis}-${directionSuffix}`;\n      } else if (type === \"bounce\") {\n        const directionSuffix = distance >= 0 ? \"positive\" : \"negative\";\n        animationClass = `animate-${type}-${directionSuffix}`;\n      }\n\n      // Apply CSS custom properties for keyframe-based animations\n      node.style.setProperty(\"--animation-duration\", `${duration}s`);\n      node.style.setProperty(\"--animation-delay\", `${delay}s`);\n      node.style.setProperty(\"--animation-easing\", easing);\n\n      if (type === \"fade\") {\n        node.style.setProperty(\"--opacity-start\", `${opacity.start}`);\n        node.style.setProperty(\"--opacity-end\", `${opacity.end}`);\n      }\n      if (type === \"slide\") {\n        node.style.setProperty(\"--distance\", `${Math.abs(distance)}px`);\n        node.style.setProperty(\"--opacity-start\", `${opacity.start}`);\n        node.style.setProperty(\"--opacity-end\", `${opacity.end}`);\n      }\n      if (type === \"scale\") {\n        node.style.setProperty(\"--scale\", `${scale}`);\n        node.style.setProperty(\"--opacity-start\", `${opacity.start}`);\n        node.style.setProperty(\"--opacity-end\", `${opacity.end}`);\n      }\n      if (type === \"bounce\") {\n        // Bounce keyframes might use --distance or a specific bounce height var\n        node.style.setProperty(\"--distance\", `${distance}px`); // Assuming keyframes use --bounce-height\n        node.style.setProperty(\"--opacity-start\", `${opacity.start}`);\n        node.style.setProperty(\"--opacity-end\", `${opacity.end}`);\n      }\n      // Note: The old logic for keyframe-based 'rotate' (animate-rotate-positive/negative) is removed\n      // as 'rotate' type now exclusively uses transitions.\n\n      if (animationClass) {\n        // Force reflow to ensure the browser processes style changes and\n        // class removal (done at the start of useEffect) before re-adding the class.\n        // This is crucial for replaying keyframe animations on the same DOM node.\n        void node.offsetWidth;\n\n        node.classList.add(animationClass);\n        if (onAnimationComplete) {\n          node.addEventListener(\"animationend\", handleAnimationEndEvent);\n        }\n      }\n    }\n\n    return () => {\n      // Cleanup listeners when effect re-runs or component unmounts\n      if (node) {\n        node.removeEventListener(\"animationend\", handleAnimationEndEvent);\n        node.removeEventListener(\"transitionend\", handleAnimationEndEvent);\n      }\n    };\n  }, [\n    type,\n    duration,\n    delay,\n    easing,\n    distance,\n    configDegrees, // Use configDegrees for rotate\n    scale,\n    opacity.start, // Use destructured and validated opacity values\n    opacity.end,\n    axis,\n    key,\n    onAnimationComplete,\n    handleAnimationEndEvent, // Added handleAnimationEndEvent\n  ]);\n\n  const replay = useCallback(() => {\n    setKey((prevKey) => prevKey + 1);\n  }, []);\n\n  return { ref: elementRef, key, replay };\n}\n\n// Helper validation functions\n/**\n * Validates if a value is a non-negative number, otherwise returns a default.\n * @param value The value to validate.\n * @param defaultValue The default value to return if validation fails.\n * @returns A valid non-negative number.\n */\nfunction validateTime(value: number | undefined, defaultValue: number): number {\n  // Ensure value is a number before checking if it's non-negative\n  const numValue = typeof value === \"number\" ? value : NaN;\n  if (!isNaN(numValue) && numValue >= 0) {\n    return numValue;\n  }\n  return defaultValue;\n}\n\n/**\n * Validates if a value is a number between 0 and 1 (inclusive) for opacity.\n * @param value The value to validate.\n * @param defaultValue The default value to use if value is not a number.\n * @returns A valid opacity value (0-1).\n */\nfunction validateOpacity(\n  value: number | undefined,\n  defaultValue: number\n): number {\n  const numValue = typeof value === \"number\" ? value : defaultValue;\n  // Ensure opacity is between 0 and 1 after defaulting\n  return Math.max(0, Math.min(1, numValue));\n}\n","\"use client\";\n\n// src/components/Animate.tsx\nimport React, { forwardRef, HTMLAttributes, JSX, ReactNode } from \"react\";\nimport { useAnimation } from \"@/hooks/useAnimation\";\nimport { AnimationConfig, AnimationType, SlideAxis } from \"@/types/index\";\n\n// Props for the Animate component\ninterface AnimateProps extends HTMLAttributes<HTMLDivElement> {\n  children: ReactNode;\n  type: AnimationType;\n  duration?: number;\n  delay?: number;\n  easing?: string;\n  distance?: number;\n  degrees?: number;\n  scale?: number;\n  opacity?: {\n    start?: number;\n    end?: number;\n  };\n  axis?: SlideAxis; // Add this for slide animation\n  as?: keyof JSX.IntrinsicElements | React.ComponentType<any>;\n  className?: string;\n  onAnimationComplete?: () => void;\n}\n\n/**\n * A wrapper component to easily apply animations using the useAnimation hook.\n * Supports forwarding refs and can render as any HTML element or component.\n *\n * @property {ReactNode} children - The content to animate.\n * @property {AnimationType} type - The type of animation to apply (e.g., \"fade\", \"slide\").\n * @property {number} [duration] - Duration of the animation in seconds.\n * @property {number} [delay] - Delay before the animation starts in seconds.\n * @property {string} [easing] - Easing function for the animation.\n * @property {number} [distance] - Distance for slide or bounce animations.\n * @property {number} [degrees] - Degrees for rotate animations.\n * @property {number} [scale] - Scale factor for scale animations.\n * @property {object} [opacity] - Opacity settings for fade animations (e.g., `{ start: 0, end: 1 }`).\n * @property {SlideAxis} [axis] - Axis for slide animations ('x' or 'y', defaults to 'x').\n * @property {keyof JSX.IntrinsicElements | React.ComponentType<any>} [as] - The HTML element or component to render as.\n * @property {string} [className] - Additional CSS classes to apply.\n * @property {function} [onAnimationComplete] - Callback function when the animation completes.\n *\n * @example\n * <Animate\n *   type=\"fade\"\n *   duration={0.5}\n *   className=\"my-custom-class\"\n * >\n *   {children}\n * </Animate>\n */\nexport const Animate = forwardRef<HTMLDivElement, AnimateProps>(\n  (\n    {\n      children,\n      as: Component = \"div\",\n      className = \"\",\n      onAnimationComplete,\n      // Animation config props\n      type,\n      duration,\n      delay,\n      easing,\n      distance,\n      degrees,\n      scale,\n      opacity,\n      axis, // Destructured axis for slide animation\n      ...props\n    },\n    forwardedRef\n  ) => {\n    // Create animation config object from props\n    const animationConfig: AnimationConfig = {\n      type,\n      duration,\n      delay,\n      easing,\n      distance,\n      degrees,\n      scale,\n      opacity,\n      axis, // Pass axis to config\n    };\n\n    // Use the animation hook\n    const { ref, key } = useAnimation<HTMLDivElement>(animationConfig);\n\n    // Combine the refs\n    const setRefs = (element: HTMLDivElement | null) => {\n      // Set the local ref from useAnimation\n      if (typeof ref === \"object\" && ref !== null) {\n        (ref as React.RefObject<HTMLDivElement | null>).current = element;\n      }\n\n      // Set the forwarded ref\n      if (forwardedRef) {\n        if (typeof forwardedRef === \"function\") {\n          forwardedRef(element);\n        } else {\n          (forwardedRef as React.RefObject<HTMLDivElement | null>).current =\n            element;\n        }\n      }\n    };\n\n    // Handle animation end event\n    const handleAnimationEnd = (e: React.AnimationEvent<HTMLDivElement>) => {\n      // Only trigger if it's the main animation ending, not child animations\n      if (e.target === ref.current) {\n        onAnimationComplete?.();\n      }\n\n      // Call the original onAnimationEnd if provided in props\n      props.onAnimationEnd?.(e);\n    };\n\n    // Create combined className\n    const combinedClassName = `animated ${className}`.trim();\n\n    // Use createElement to properly handle the dynamic component type\n    return React.createElement(\n      Component,\n      {\n        ...props,\n        ref: setRefs,\n        className: combinedClassName,\n        key, // Key helps force re-animation\n        onAnimationEnd: handleAnimationEnd,\n        // Add data attributes for potential debugging/testing\n        \"data-animation-type\": type,\n        \"data-animation-duration\": duration ?? 0.5,\n        \"data-animation-delay\": delay ?? 0,\n      },\n      children\n    );\n  }\n);\n\nAnimate.displayName = \"Animate\";\n\nexport default Animate;\n"]}