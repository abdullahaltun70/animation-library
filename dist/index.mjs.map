{"version":3,"sources":["../src/hooks/useAnimation.ts","../src/components/Animate.tsx"],"names":["DEFAULTS","useAnimation","config","onAnimationComplete","type","configDuration","configDelay","configEasing","configDistance","configDegrees","configScale","configOpacity","configAxis","duration","validateTime","delay","easing","distance","scale","axis","opacity","validateOpacity","key","setKey","useState","elementRef","useRef","animationTimerRef","handleAnimationEndEvent","useCallback","event","useEffect","node","cls","animationClass","degreesStart","degreesEnd","directionSuffix","currentNode","replay","prevKey","value","defaultValue","numValue","Animate","forwardRef","children","Component","className","degrees","props","forwardedRef","animationConfig","ref","setRefs","element","handleAnimationEnd","e","combinedClassName","React"],"mappings":"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","file":"index.mjs","sourcesContent":["\"use client\";\n\nimport { AnimationConfig, SlideAxis } from \"@/types/index\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nexport interface UseAnimationReturn<T extends HTMLElement> {\n  ref: React.RefObject<T | null>;\n  key: number; // Key to force re-render and replay animation\n  replay: () => void; // Function to manually replay the animation\n}\n\nconst DEFAULTS = {\n  duration: 0.5,\n  delay: 0,\n  easing: \"ease-out\",\n  opacityStart: 0,\n  opacityEnd: 1,\n  distance: 50,\n  degrees: 360, // Default end rotation for one-shot keyframe animation\n  degreesStart: 0, // Default start rotation for one-shot keyframe animation\n  scale: 0.8,\n  axis: \"x\" as SlideAxis, // Changed from ax to axis\n};\n\n/**\n * Custom hook to apply CSS animations based on configuration.\n * Returns a ref to attach to the target element, a key for re-renders, and a replay function.\n */\nexport function useAnimation<T extends HTMLElement>(\n  config: AnimationConfig,\n  onAnimationComplete?: (event: Event) => void\n): UseAnimationReturn<T> {\n  const {\n    type,\n    duration: configDuration,\n    delay: configDelay,\n    easing: configEasing,\n    distance: configDistance,\n    degrees: configDegrees,\n    scale: configScale,\n    opacity: configOpacity,\n    axis: configAxis,\n  } = config;\n\n  const duration = validateTime(configDuration, DEFAULTS.duration);\n  const delay = validateTime(configDelay, DEFAULTS.delay);\n  const easing = configEasing || DEFAULTS.easing;\n  const distance = configDistance ?? DEFAULTS.distance;\n  const scale = configScale ?? DEFAULTS.scale;\n  const axis = configAxis || DEFAULTS.axis;\n  const opacity = {\n    start: validateOpacity(configOpacity?.start, DEFAULTS.opacityStart),\n    end: validateOpacity(configOpacity?.end, DEFAULTS.opacityEnd),\n  };\n\n  const [key, setKey] = useState(0);\n  const elementRef = useRef<T>(null);\n  const animationTimerRef = useRef<ReturnType<typeof setTimeout> | null>(null); // Ref for the animation timer\n\n  const handleAnimationEndEvent = useCallback(\n    (event: Event) => {\n      if (event.target === elementRef.current && onAnimationComplete) {\n        onAnimationComplete(event);\n        // Remove listener after execution\n        if (event.type === \"animationend\") {\n          elementRef.current?.removeEventListener(\n            \"animationend\",\n            handleAnimationEndEvent\n          );\n        } else if (event.type === \"transitionend\") {\n          elementRef.current?.removeEventListener(\n            \"transitionend\",\n            handleAnimationEndEvent\n          );\n        }\n      }\n    },\n    [onAnimationComplete]\n  );\n\n  useEffect(() => {\n    const node = elementRef.current;\n    if (!node) return;\n\n    // Clear any previous animation/transition related styles and classes\n    node.style.transition = \"\";\n    node.style.transform = \"\"; // Reset transform if switching types\n    const classesToRemove = Array.from(node.classList).filter((cls) =>\n      cls.startsWith(\"animate-\")\n    );\n    classesToRemove.forEach((cls) => node.classList.remove(cls));\n\n    // Remove previous listeners to avoid multiple calls\n    node.removeEventListener(\"animationend\", handleAnimationEndEvent);\n    node.removeEventListener(\"transitionend\", handleAnimationEndEvent);\n\n    // Clear any pending animation timer from previous effect run\n    if (animationTimerRef.current) {\n      clearTimeout(animationTimerRef.current);\n    }\n\n    // All animations will now use the class-based approach\n    let animationClass = `animate-${type}`; // Base class like animate-fade, animate-scale\n\n    // Determine degrees for rotate animation\n    let degreesStart = DEFAULTS.degreesStart;\n    let degreesEnd = DEFAULTS.degrees; // Default end rotation\n\n    if (type === \"rotate\") {\n      if (typeof configDegrees === \"number\") {\n        degreesEnd = configDegrees;\n        // degreesStart remains DEFAULTS.degreesStart (0)\n      } else if (configDegrees) {\n        degreesEnd = configDegrees.end;\n        degreesStart = configDegrees.start ?? DEFAULTS.degreesStart;\n      }\n      // Determine rotation direction\n      if (degreesEnd < degreesStart) {\n        animationClass = `animate-rotate-negative`;\n      } else {\n        animationClass = `animate-rotate-positive`;\n      }\n    } else if (type === \"slide\") {\n      const directionSuffix = distance >= 0 ? \"positive\" : \"negative\";\n      animationClass = `animate-${type}-${axis}-${directionSuffix}`;\n    } else if (type === \"bounce\") {\n      const directionSuffix = distance >= 0 ? \"positive\" : \"negative\";\n      animationClass = `animate-${type}-${directionSuffix}`;\n    }\n\n    // Apply CSS custom properties for keyframe-based animations\n    node.style.setProperty(\"--animation-duration\", `${duration}s`);\n    node.style.setProperty(\"--animation-delay\", `${delay}s`);\n    node.style.setProperty(\"--animation-easing\", easing);\n\n    if (type === \"fade\") {\n      node.style.setProperty(\"--opacity-start\", `${opacity.start}`);\n      node.style.setProperty(\"--opacity-end\", `${opacity.end}`);\n    } else if (type === \"slide\") {\n      node.style.setProperty(\"--distance\", `${Math.abs(distance)}px`);\n      node.style.setProperty(\"--opacity-start\", `${opacity.start}`);\n      node.style.setProperty(\"--opacity-end\", `${opacity.end}`);\n    } else if (type === \"scale\") {\n      node.style.setProperty(\"--scale\", `${scale}`);\n      node.style.setProperty(\"--opacity-start\", `${opacity.start}`);\n      node.style.setProperty(\"--opacity-end\", `${opacity.end}`);\n    } else if (type === \"bounce\") {\n      node.style.setProperty(\"--distance\", `${distance}px`);\n      node.style.setProperty(\"--opacity-start\", `${opacity.start}`);\n      node.style.setProperty(\"--opacity-end\", `${opacity.end}`);\n    } else if (type === \"rotate\") {\n      node.style.setProperty(\"--degrees-start\", `${degreesStart}deg`);\n      node.style.setProperty(\"--degrees-end\", `${degreesEnd}deg`);\n      node.style.setProperty(\"--opacity-start\", `${opacity.start}`);\n      node.style.setProperty(\"--opacity-end\", `${opacity.end}`);\n    }\n\n    if (animationClass) {\n      // Initial reflow after properties are set and old classes are removed (done at the top of useEffect)\n      void node.offsetWidth;\n\n      animationTimerRef.current = window.setTimeout(() => {\n        const currentNode = elementRef.current;\n        if (currentNode) {\n          // More forceful animation reset\n          currentNode.style.animation = \"none\"; // 1. Temporarily disable animations\n          void currentNode.offsetWidth; // 2. Force reflow\n          currentNode.style.animation = \"\"; // 3. Clear the inline style so class animation can apply\n\n          // Add the class to trigger the animation\n          currentNode.classList.add(animationClass); // 4. Add class\n\n          if (onAnimationComplete) {\n            currentNode.addEventListener(\n              \"animationend\",\n              handleAnimationEndEvent\n            );\n          }\n        }\n      }, 20); // Increased delay slightly to 20ms\n    }\n    // } // This curly brace is removed as rotate is now part of the same logic block\n\n    return () => {\n      // Cleanup listeners when effect re-runs or component unmounts\n      if (animationTimerRef.current) {\n        clearTimeout(animationTimerRef.current); // Clear the timer on cleanup\n      }\n      if (node) {\n        // node is from the useEffect closure\n        node.removeEventListener(\"animationend\", handleAnimationEndEvent);\n        node.removeEventListener(\"transitionend\", handleAnimationEndEvent);\n      }\n    };\n  }, [\n    type,\n    duration,\n    delay,\n    easing,\n    distance,\n    configDegrees, // Use configDegrees for rotate\n    scale,\n    opacity.start, // Use destructured and validated opacity values\n    opacity.end,\n    axis,\n    key,\n    onAnimationComplete,\n    handleAnimationEndEvent, // Added handleAnimationEndEvent\n  ]);\n\n  const replay = useCallback(() => {\n    setKey((prevKey) => prevKey + 1);\n  }, []);\n\n  return { ref: elementRef, key, replay };\n}\n\n// Helper validation functions\n/**\n * Validates if a value is a non-negative number, otherwise returns a default.\n * @param value The value to validate.\n * @param defaultValue The default value to return if validation fails.\n * @returns A valid non-negative number.\n */\nfunction validateTime(value: number | undefined, defaultValue: number): number {\n  // Ensure value is a number before checking if it's non-negative\n  const numValue = typeof value === \"number\" ? value : NaN;\n  if (!isNaN(numValue) && numValue >= 0) {\n    return numValue;\n  }\n  return defaultValue;\n}\n\n/**\n * Validates if a value is a number between 0 and 1 (inclusive) for opacity.\n * @param value The value to validate.\n * @param defaultValue The default value to use if value is not a number.\n * @returns A valid opacity value (0-1).\n */\nfunction validateOpacity(\n  value: number | undefined,\n  defaultValue: number\n): number {\n  const numValue = typeof value === \"number\" ? value : defaultValue;\n  // Ensure opacity is between 0 and 1 after defaulting\n  return Math.max(0, Math.min(1, numValue));\n}\n","\"use client\";\n\n// src/components/Animate.tsx\nimport React, { forwardRef, HTMLAttributes, JSX, ReactNode } from \"react\";\nimport { useAnimation } from \"@/hooks/useAnimation\";\nimport { AnimationConfig, AnimationType, SlideAxis } from \"@/types/index\";\n\n// Props for the Animate component\ninterface AnimateProps extends HTMLAttributes<HTMLDivElement> {\n  children: ReactNode;\n  type: AnimationType;\n  duration?: number;\n  delay?: number;\n  easing?: string;\n  distance?: number;\n  degrees?:\n    | number\n    | {\n        // Updated to match AnimationConfig\n        start?: number;\n        end: number;\n      };\n  scale?: number;\n  opacity?: {\n    start?: number;\n    end?: number;\n  };\n  axis?: SlideAxis; // Add this for slide animation\n  as?: keyof JSX.IntrinsicElements | React.ComponentType<any>;\n  className?: string;\n  onAnimationComplete?: () => void;\n}\n\n/**\n * A wrapper component to easily apply animations using the useAnimation hook.\n * Supports forwarding refs and can render as any HTML element or component.\n * The component adds an \"animated\" class to its root element.\n *\n * @property {ReactNode} children - The content to animate. Must be a single React element that can accept a ref.\n * @property {AnimationType} type - The type of animation to apply (e.g., \"fade\", \"slide\").\n * @property {number} [duration=0.5] - Duration of the animation in seconds.\n * @property {number} [delay=0] - Delay before the animation starts in seconds.\n * @property {string} [easing=\"ease-out\"] - Easing function for the animation.\n * @property {number} [distance=50] - Distance for slide or bounce animations.\n * @property {number | { start?: number; end: number }} [degrees=360] - Degrees for rotate animations.\n * @property {number} [scale=0.8] - Scale factor for scale animations.\n * @property {{ start?: number; end?: number }} [opacity] - Opacity settings for animations (e.g., `{ start: 0, end: 1 }`).\n * @property {SlideAxis} [axis=\"x\"] - Axis for slide animations ('x' or 'y').\n * @property {keyof JSX.IntrinsicElements | React.ComponentType<any>} [as=\"div\"] - The HTML element or component to render as.\n * @property {string} [className] - Additional CSS classes to apply.\n * @property {() => void} [onAnimationComplete] - Callback function when the animation completes.\n *\n * @example\n * <Animate\n *   type=\"fade\"\n *   duration={0.5}\n *   className=\"my-custom-class\"\n * >\n *   {children}\n * </Animate>\n */\nexport const Animate = forwardRef<HTMLDivElement, AnimateProps>(\n  (\n    {\n      children,\n      as: Component = \"div\",\n      className = \"\",\n      onAnimationComplete,\n      // Animation config props\n      type,\n      duration,\n      delay,\n      easing,\n      distance,\n      degrees,\n      scale,\n      opacity,\n      axis,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    // Create animation config object from props\n    const animationConfig: AnimationConfig = {\n      type,\n      duration,\n      delay,\n      easing,\n      distance,\n      degrees,\n      scale,\n      opacity,\n      axis,\n    };\n\n    // Use the animation hook\n    const { ref, key } = useAnimation<HTMLDivElement>(animationConfig);\n\n    // Combine the refs\n    const setRefs = (element: HTMLDivElement | null) => {\n      // Set the local ref from useAnimation\n      if (typeof ref === \"object\" && ref !== null) {\n        (ref as React.RefObject<HTMLDivElement | null>).current = element;\n      }\n\n      // Set the forwarded ref\n      if (forwardedRef) {\n        if (typeof forwardedRef === \"function\") {\n          forwardedRef(element);\n        } else {\n          (forwardedRef as React.RefObject<HTMLDivElement | null>).current =\n            element;\n        }\n      }\n    };\n\n    // Handle animation end event\n    const handleAnimationEnd = (e: React.AnimationEvent<HTMLDivElement>) => {\n      // Only trigger if it's the main animation ending, not child animations\n      if (e.target === ref.current) {\n        onAnimationComplete?.();\n      }\n\n      // Call the original onAnimationEnd if provided in props\n      props.onAnimationEnd?.(e);\n    };\n\n    // Create combined className\n    const combinedClassName = `animated ${className}`.trim();\n\n    // Use createElement to properly handle the dynamic component type\n    return React.createElement(\n      Component,\n      {\n        ...props,\n        ref: setRefs,\n        className: combinedClassName,\n        key, // Key helps force re-animation\n        onAnimationEnd: handleAnimationEnd,\n        // Add data attributes for potential debugging/testing\n        \"data-animation-type\": type,\n        \"data-animation-duration\": duration ?? 0.5,\n        \"data-animation-delay\": delay ?? 0,\n      },\n      children\n    );\n  }\n);\n\nAnimate.displayName = \"Animate\";\n\nexport default Animate;\n"]}