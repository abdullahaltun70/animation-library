{"version":3,"sources":["../src/hooks/useAnimation.ts","../src/components/Animate.tsx"],"names":["DEFAULTS","useAnimation","config","onAnimationComplete","type","configDuration","configDelay","configEasing","configDistance","configDegrees","configScale","configOpacity","configAxis","duration","validateTime","delay","easing","distance","scale","axis","opacity","validateOpacity","key","setKey","useState","elementRef","useRef","animationTimerRef","isInitialRenderRef","handleAnimationEndEvent","useCallback","event","useEffect","node","cls","degreesStart","degreesEnd","currentTransform","currentRotation","match","animationClass","currentNode","directionSuffix","replay","prevKey","value","defaultValue","numValue","Animate","forwardRef","children","Component","className","degrees","props","forwardedRef","animationConfig","ref","setRefs","element","handleAnimationEnd","e","combinedClassName","React"],"mappings":"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","file":"index.mjs","sourcesContent":["\"use client\";\n\nimport { AnimationConfig, SlideAxis } from \"@/types/index\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nexport interface UseAnimationReturn<T extends HTMLElement> {\n  ref: React.RefObject<T | null>;\n  key: number; // Key to force re-render and replay animation\n  replay: () => void; // Function to manually replay the animation\n}\n\nconst DEFAULTS = {\n  duration: 0.5,\n  delay: 0,\n  easing: \"ease-out\",\n  opacityStart: 0,\n  opacityEnd: 1,\n  distance: 50,\n  degrees: 360, // Default end rotation for one-shot keyframe animation\n  degreesStart: 0, // Default start rotation for one-shot keyframe animation\n  scale: 0.8,\n  axis: \"x\" as SlideAxis,\n};\n\n/**\n * Custom hook to apply CSS animations based on configuration.\n * Returns a ref to attach to the target element, a key for re-renders, and a replay function.\n */\nexport function useAnimation<T extends HTMLElement>(\n  config: AnimationConfig,\n  onAnimationComplete?: (event: Event) => void\n): UseAnimationReturn<T> {\n  const {\n    type,\n    duration: configDuration,\n    delay: configDelay,\n    easing: configEasing,\n    distance: configDistance,\n    degrees: configDegrees,\n    scale: configScale,\n    opacity: configOpacity,\n    axis: configAxis,\n  } = config;\n\n  const duration = validateTime(configDuration, DEFAULTS.duration);\n  const delay = validateTime(configDelay, DEFAULTS.delay);\n  const easing = configEasing || DEFAULTS.easing;\n  const distance = configDistance ?? DEFAULTS.distance;\n  const scale = configScale ?? DEFAULTS.scale;\n  const axis = configAxis || DEFAULTS.axis;\n  const opacity = {\n    start: validateOpacity(configOpacity?.start, DEFAULTS.opacityStart),\n    end: validateOpacity(configOpacity?.end, DEFAULTS.opacityEnd),\n  };\n\n  const [key, setKey] = useState(0);\n  const elementRef = useRef<T>(null);\n  const animationTimerRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n  const isInitialRenderRef = useRef(true);\n\n  const handleAnimationEndEvent = useCallback(\n    (event: Event) => {\n      if (event.target === elementRef.current && onAnimationComplete) {\n        onAnimationComplete(event);\n        // Remove listener after execution\n        if (event.type === \"animationend\") {\n          elementRef.current?.removeEventListener(\n            \"animationend\",\n            handleAnimationEndEvent\n          );\n        } else if (event.type === \"transitionend\") {\n          elementRef.current?.removeEventListener(\n            \"transitionend\",\n            handleAnimationEndEvent\n          );\n        }\n      }\n    },\n    [onAnimationComplete]\n  );\n\n  useEffect(() => {\n    const node = elementRef.current;\n    if (!node) return;\n\n    // Clear any previous animation/transition related styles and classes\n    node.style.transition = \"\";\n    \n    // **FIX 1: Don't reset transform - preserve current rotation state**\n    // node.style.transform = \"\"; // REMOVED - this was causing jumps\n    \n    const classesToRemove = Array.from(node.classList).filter((cls) =>\n      cls.startsWith(\"animate-\")\n    );\n    classesToRemove.forEach((cls) => node.classList.remove(cls));\n\n    // Remove previous listeners to avoid multiple calls\n    node.removeEventListener(\"animationend\", handleAnimationEndEvent);\n    node.removeEventListener(\"transitionend\", handleAnimationEndEvent);\n\n    // Clear any pending animation timer from previous effect run\n    if (animationTimerRef.current) {\n      clearTimeout(animationTimerRef.current);\n    }\n\n    if (type === \"rotate\") {\n      let degreesStart = DEFAULTS.degreesStart;\n      let degreesEnd = DEFAULTS.degrees;\n\n      if (typeof configDegrees === \"number\") {\n        degreesEnd = configDegrees;\n      } else if (configDegrees) {\n        degreesStart = configDegrees.start ?? DEFAULTS.degreesStart;\n        degreesEnd = configDegrees.end ?? configDegrees.start ?? DEFAULTS.degrees;\n      }\n\n      // **FIX 2: Use current computed rotation as start point for smooth transitions**\n      const currentTransform = window.getComputedStyle(node).transform;\n      let currentRotation = degreesStart;\n\n      if (currentTransform !== \"none\" && currentTransform.includes(\"rotate\")) {\n        const match = currentTransform.match(/rotate$(-?\\d+\\.?\\d*)deg$/);\n        if (match) {\n          currentRotation = parseFloat(match[1]);\n        }\n      }\n\n      // **FIX 3: For initial render, don't animate unless explicitly requested**\n      if (isInitialRenderRef.current && !config.animateOnMount) {\n        // Set the target rotation immediately without animation\n        node.style.transform = `rotate(${degreesEnd}deg)`;\n        isInitialRenderRef.current = false;\n        return;\n      }\n\n      // Set CSS custom properties for keyframe animations\n      node.style.setProperty(\"--degrees-start\", `${currentRotation}deg`);\n      node.style.setProperty(\"--degrees-end\", `${degreesEnd}deg`);\n\n      // Determine animation direction\n      let animationClass = \"animate-rotate-positive\";\n      if (degreesEnd < currentRotation) {\n        animationClass = \"animate-rotate-negative\";\n      }\n\n      // Apply CSS custom properties for animation timing\n      node.style.setProperty(\"--animation-duration\", `${duration}s`);\n      node.style.setProperty(\"--animation-delay\", `${delay}s`);\n      node.style.setProperty(\"--animation-easing\", easing);\n\n      // Force reflow before applying animation class\n      void node.offsetWidth;\n\n      animationTimerRef.current = window.setTimeout(() => {\n        const currentNode = elementRef.current;\n        if (currentNode) {\n          // Reset animation to ensure clean start\n          currentNode.style.animation = \"none\";\n          void currentNode.offsetWidth;\n          currentNode.style.animation = \"\";\n\n          // Add the animation class\n          currentNode.classList.add(animationClass);\n\n          if (onAnimationComplete) {\n            currentNode.addEventListener(\"animationend\", handleAnimationEndEvent);\n          }\n        }\n      }, 10);\n\n    } else {\n      // Logic for class-based animations (fade, slide, scale, bounce)\n      let animationClass = `animate-${type}`;\n\n      if (type === \"slide\") {\n        const directionSuffix = distance >= 0 ? \"positive\" : \"negative\";\n        animationClass = `animate-${type}-${axis}-${directionSuffix}`;\n      } else if (type === \"bounce\") {\n        const directionSuffix = distance >= 0 ? \"positive\" : \"negative\";\n        animationClass = `animate-${type}-${directionSuffix}`;\n      }\n\n      // Apply CSS custom properties for keyframe-based animations\n      node.style.setProperty(\"--animation-duration\", `${duration}s`);\n      node.style.setProperty(\"--animation-delay\", `${delay}s`);\n      node.style.setProperty(\"--animation-easing\", easing);\n\n      if (type === \"fade\") {\n        node.style.setProperty(\"--opacity-start\", `${opacity.start}`);\n        node.style.setProperty(\"--opacity-end\", `${opacity.end}`);\n      }\n      if (type === \"slide\") {\n        node.style.setProperty(\"--distance\", `${Math.abs(distance)}px`);\n        node.style.setProperty(\"--opacity-start\", `${opacity.start}`);\n        node.style.setProperty(\"--opacity-end\", `${opacity.end}`);\n      }\n      if (type === \"scale\") {\n        node.style.setProperty(\"--scale\", `${scale}`);\n        node.style.setProperty(\"--opacity-start\", `${opacity.start}`);\n        node.style.setProperty(\"--opacity-end\", `${opacity.end}`);\n      }\n      if (type === \"bounce\") {\n        node.style.setProperty(\"--distance\", `${distance}px`);\n        node.style.setProperty(\"--opacity-start\", `${opacity.start}`);\n        node.style.setProperty(\"--opacity-end\", `${opacity.end}`);\n      }\n\n      if (animationClass) {\n        // **FIX 4: Skip initial animation for non-rotate types unless explicitly requested**\n        if (isInitialRenderRef.current && !config.animateOnMount) {\n          isInitialRenderRef.current = false;\n          return;\n        }\n\n        // Initial reflow after properties are set and old classes are removed\n        void node.offsetWidth;\n\n        animationTimerRef.current = window.setTimeout(() => {\n          const currentNode = elementRef.current;\n          if (currentNode) {\n            // Reset animation for clean start\n            currentNode.style.animation = \"none\";\n            void currentNode.offsetWidth;\n            currentNode.style.animation = \"\";\n\n            // Add the class to trigger the animation\n            currentNode.classList.add(animationClass);\n\n            if (onAnimationComplete) {\n              currentNode.addEventListener(\"animationend\", handleAnimationEndEvent);\n            }\n          }\n        }, 10);\n      }\n    }\n\n    // Mark that initial render is complete\n    isInitialRenderRef.current = false;\n\n    return () => {\n      // Cleanup listeners when effect re-runs or component unmounts\n      if (animationTimerRef.current) {\n        clearTimeout(animationTimerRef.current);\n      }\n      if (node) {\n        node.removeEventListener(\"animationend\", handleAnimationEndEvent);\n        node.removeEventListener(\"transitionend\", handleAnimationEndEvent);\n      }\n    };\n  }, [\n    type,\n    duration,\n    delay,\n    easing,\n    distance,\n    configDegrees,\n    scale,\n    opacity.start,\n    opacity.end,\n    axis,\n    key,\n    onAnimationComplete,\n    handleAnimationEndEvent,\n    config.animateOnMount, // Add this to dependencies\n  ]);\n\n  const replay = useCallback(() => {\n    const node = elementRef.current;\n    if (node) {\n      // **FIX 5: Improved replay logic**\n      // Temporarily disable animations\n      node.style.animation = \"none\";\n      \n      // Remove all animation classes\n      const classesToRemove = Array.from(node.classList).filter((cls) =>\n        cls.startsWith(\"animate-\")\n      );\n      classesToRemove.forEach((cls) => node.classList.remove(cls));\n\n      // Force reflow to reset animation state\n      void node.offsetHeight;\n\n      // Re-enable animations\n      node.style.animation = \"\";\n    }\n    \n    // Increment key to fully re-trigger effects\n    setKey((prevKey) => prevKey + 1);\n  }, []);\n\n  return { ref: elementRef, key, replay };\n}\n\n// Helper validation functions\nfunction validateTime(value: number | undefined, defaultValue: number): number {\n  const numValue = typeof value === \"number\" ? value : NaN;\n  if (!isNaN(numValue) && numValue >= 0) {\n    return numValue;\n  }\n  return defaultValue;\n}\n\nfunction validateOpacity(value: number | undefined, defaultValue: number): number {\n  const numValue = typeof value === \"number\" ? value : NaN;\n  if (!isNaN(numValue) && numValue >= 0 && numValue <= 1) {\n    return numValue;\n  }\n  return defaultValue;\n}","\"use client\";\n\n// src/components/Animate.tsx\nimport React, { forwardRef, HTMLAttributes, JSX, ReactNode } from \"react\";\nimport { useAnimation } from \"@/hooks/useAnimation\";\nimport { AnimationConfig, AnimationType, SlideAxis } from \"@/types/index\";\n\n// Props for the Animate component\ninterface AnimateProps extends HTMLAttributes<HTMLDivElement> {\n  children: ReactNode;\n  type: AnimationType;\n  duration?: number;\n  delay?: number;\n  easing?: string;\n  distance?: number;\n  degrees?:\n    | number\n    | {\n        // Updated to match AnimationConfig\n        start?: number;\n        end: number;\n      };\n  scale?: number;\n  opacity?: {\n    start?: number;\n    end?: number;\n  };\n  axis?: SlideAxis; // Add this for slide animation\n  as?: keyof JSX.IntrinsicElements | React.ComponentType<any>;\n  className?: string;\n  onAnimationComplete?: () => void;\n}\n\n/**\n * A wrapper component to easily apply animations using the useAnimation hook.\n * Supports forwarding refs and can render as any HTML element or component.\n * The component adds an \"animated\" class to its root element.\n *\n * @property {ReactNode} children - The content to animate. Must be a single React element that can accept a ref.\n * @property {AnimationType} type - The type of animation to apply (e.g., \"fade\", \"slide\").\n * @property {number} [duration=0.5] - Duration of the animation in seconds.\n * @property {number} [delay=0] - Delay before the animation starts in seconds.\n * @property {string} [easing=\"ease-out\"] - Easing function for the animation.\n * @property {number} [distance=50] - Distance for slide or bounce animations.\n * @property {number | { start?: number; end: number }} [degrees=360] - Degrees for rotate animations.\n * @property {number} [scale=0.8] - Scale factor for scale animations.\n * @property {{ start?: number; end?: number }} [opacity] - Opacity settings for animations (e.g., `{ start: 0, end: 1 }`).\n * @property {SlideAxis} [axis=\"x\"] - Axis for slide animations ('x' or 'y').\n * @property {keyof JSX.IntrinsicElements | React.ComponentType<any>} [as=\"div\"] - The HTML element or component to render as.\n * @property {string} [className] - Additional CSS classes to apply.\n * @property {() => void} [onAnimationComplete] - Callback function when the animation completes.\n *\n * @example\n * <Animate\n *   type=\"fade\"\n *   duration={0.5}\n *   className=\"my-custom-class\"\n * >\n *   {children}\n * </Animate>\n */\nexport const Animate = forwardRef<HTMLDivElement, AnimateProps>(\n  (\n    {\n      children,\n      as: Component = \"div\",\n      className = \"\",\n      onAnimationComplete,\n      // Animation config props\n      type,\n      duration,\n      delay,\n      easing,\n      distance,\n      degrees,\n      scale,\n      opacity,\n      axis,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    // Create animation config object from props\n    const animationConfig: AnimationConfig = {\n      type,\n      duration,\n      delay,\n      easing,\n      distance,\n      degrees,\n      scale,\n      opacity,\n      axis,\n    };\n\n    // Use the animation hook\n    const { ref, key } = useAnimation<HTMLDivElement>(animationConfig);\n\n    // Combine the refs\n    const setRefs = (element: HTMLDivElement | null) => {\n      // Set the local ref from useAnimation\n      if (typeof ref === \"object\" && ref !== null) {\n        (ref as React.RefObject<HTMLDivElement | null>).current = element;\n      }\n\n      // Set the forwarded ref\n      if (forwardedRef) {\n        if (typeof forwardedRef === \"function\") {\n          forwardedRef(element);\n        } else {\n          (forwardedRef as React.RefObject<HTMLDivElement | null>).current =\n            element;\n        }\n      }\n    };\n\n    // Handle animation end event\n    const handleAnimationEnd = (e: React.AnimationEvent<HTMLDivElement>) => {\n      // Only trigger if it's the main animation ending, not child animations\n      if (e.target === ref.current) {\n        onAnimationComplete?.();\n      }\n\n      // Call the original onAnimationEnd if provided in props\n      props.onAnimationEnd?.(e);\n    };\n\n    // Create combined className\n    const combinedClassName = `animated ${className}`.trim();\n\n    // Use createElement to properly handle the dynamic component type\n    return React.createElement(\n      Component,\n      {\n        ...props,\n        ref: setRefs,\n        className: combinedClassName,\n        key, // Key helps force re-animation\n        onAnimationEnd: handleAnimationEnd,\n        // Add data attributes for potential debugging/testing\n        \"data-animation-type\": type,\n        \"data-animation-duration\": duration ?? 0.5,\n        \"data-animation-delay\": delay ?? 0,\n      },\n      children\n    );\n  }\n);\n\nAnimate.displayName = \"Animate\";\n\nexport default Animate;\n"]}