{"version":3,"sources":["../src/hooks/useAnimation.ts","../src/components/Animate.tsx"],"names":["DEFAULTS","useAnimation","config","type","duration","delay","easing","distance","degrees","scale","opacity","opacityStart","opacityEnd","key","setKey","useState","elementRef","useRef","getAnimationClass","useCallback","useEffect","element","animationClass","classesToRemove","cls","validateTime","validateOpacity","distanceValue","degreesValue","scaleValue","replay","prevKey","value","defaultValue","numValue","Animate","forwardRef","children","Component","className","onAnimationComplete","props","forwardedRef","animationConfig","ref","setRefs","handleAnimationEnd","e","combinedClassName","React"],"mappings":"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","file":"index.js","sourcesContent":["// src/hooks/useAnimation.ts\n'use client'; \n\nimport { useEffect, useRef, useState, useCallback } from 'react';\n\n// Define the types needed for the hook\nexport type AnimationType = 'fade' | 'slide' | 'scale' | 'rotate' | 'bounce';\n\nexport interface AnimationConfig {\n  type: AnimationType;\n  duration?: number;\n  delay?: number;\n  easing?: string;\n  distance?: number; // Used for slide, bounce\n  degrees?: number; // Used for rotate\n  scale?: number; // Used for scale\n  opacity?: { // Used for fade\n    start?: number;\n    end?: number;\n  };\n}\n\ninterface UseAnimationReturn<T extends HTMLElement> {\n  ref: React.RefObject<T | null>;\n  key: number; // Key to force re-render/re-animation\n  replay: () => void;\n}\n\nconst DEFAULTS = {\n  duration: 0.5,\n  delay: 0,\n  easing: 'ease-out',\n  opacityStart: 0,\n  opacityEnd: 1,\n  distance: 50,\n  degrees: 360,\n  scale: 0.8,\n};\n\n/**\n * Custom hook to apply CSS animations based on configuration.\n * Returns a ref to attach to the target element and a replay function.\n */\nexport function useAnimation<T extends HTMLElement>(\n  config: AnimationConfig\n): UseAnimationReturn<T> {\n  const {\n    type,\n    duration = DEFAULTS.duration,\n    delay = DEFAULTS.delay,\n    easing = DEFAULTS.easing,\n    distance,\n    degrees,\n    scale,\n    opacity = {},\n  } = config;\n\n  const { start: opacityStart = DEFAULTS.opacityStart, end: opacityEnd = DEFAULTS.opacityEnd } = opacity;\n\n  const [key, setKey] = useState(0);\n  const elementRef = useRef<T>(null);\n\n  // Memoize the function to get the correct animation class WITH direction\n  const getAnimationClass = useCallback((): string => {\n    switch (type) {\n      case 'fade':\n        return 'animate-fade'; // Matches _animations.scss\n      case 'slide': {\n        // Determine direction based on distance sign. Default to positive if undefined/zero.\n        const effectiveDistance = distance ?? DEFAULTS.distance;\n        // NOTE: Assuming X-axis slide for now based on original library structure.\n        // Could add an 'axis' prop if Y-axis slides are needed.\n        return effectiveDistance >= 0 ? 'animate-slide-x-positive' : 'animate-slide-x-negative';\n      }\n      case 'scale':\n        return 'animate-scale';\n      case 'rotate': {\n        const effectiveDegrees = degrees ?? DEFAULTS.degrees;\n        return effectiveDegrees >= 0 ? 'animate-rotate-positive' : 'animate-rotate-negative';\n      }\n      case 'bounce': {\n        // Using distance sign for bounce direction (positive=up, negative=down)\n        const effectiveDistance = distance ?? DEFAULTS.distance;\n        return effectiveDistance >= 0 ? 'animate-bounce-positive' : 'animate-bounce-negative';\n      }\n      default:\n         // Help TypeScript ensure all cases are handled\n         const _exhaustiveCheck: never = type;\n         console.warn(`Unknown animation type: ${type}`);\n         return '';\n    }\n  }, [type, distance, degrees]);\n\n\n  // Effect to apply styles and classes\n  useEffect(() => {\n    const element = elementRef.current;\n    if (!element) return;\n\n    const animationClass = getAnimationClass();\n    if (!animationClass) return;\n\n     // --- Clean up previous classes ---\n     const classesToRemove = Array.from(element.classList).filter(cls => cls.startsWith('animate-'));\n     if (classesToRemove.length > 0) {\n        element.classList.remove(...classesToRemove);\n     }\n\n     // --- Apply new class ---\n     // Force reflow before adding class might be needed in some edge cases for replay,\n     // but key-based re-render often suffices.\n     // void element.offsetWidth; // Example reflow trigger (use cautiously)\n     element.classList.add(animationClass);\n\n\n    // --- Set CSS Custom Properties ---\n    // Ensure values are valid numbers before setting\n    element.style.setProperty('--animation-duration', `${validateTime(duration, DEFAULTS.duration)}s`);\n    element.style.setProperty('--animation-delay', `${validateTime(delay, DEFAULTS.delay)}s`);\n    element.style.setProperty('--animation-easing', easing);\n\n    // Type-specific properties - use ABSOLUTE values for magnitude variables\n    if (type === 'fade') {\n      element.style.setProperty('--opacity-start', validateOpacity(opacityStart).toString());\n      element.style.setProperty('--opacity-end', validateOpacity(opacityEnd).toString());\n    }\n\n    if (type === 'slide' || type === 'bounce') {\n        const distanceValue = distance !== undefined ? distance : DEFAULTS.distance;\n        // **FIX**: Use absolute value for the CSS variable magnitude\n        element.style.setProperty('--distance', `${Math.abs(distanceValue)}px`);\n    }\n\n    if (type === 'rotate') {\n        const degreesValue = degrees !== undefined ? degrees : DEFAULTS.degrees;\n        // **FIX**: Use absolute value for the CSS variable magnitude\n        element.style.setProperty('--degrees', `${Math.abs(degreesValue)}deg`);\n    }\n\n    if (type === 'scale') {\n        const scaleValue = scale !== undefined ? scale : DEFAULTS.scale;\n        element.style.setProperty('--scale', scaleValue.toString());\n    }\n\n    // Cleanup function\n    return () => {\n      if (elementRef.current) {\n        elementRef.current.classList.remove(animationClass);\n        // Maybe clear custom properties if needed, though often overkill\n        // elementRef.current.style.removeProperty('--animation-duration');\n        // ... etc\n      }\n    };\n  }, [key, type, duration, delay, easing, distance, degrees, scale, opacityStart, opacityEnd, getAnimationClass]);\n\n  const replay = useCallback(() => {\n    setKey((prevKey) => prevKey + 1);\n  }, []);\n\n  return { ref: elementRef, key, replay };\n}\n\n// Helper validation functions\nfunction validateTime(value: number | undefined, defaultValue: number): number {\n  return typeof value === 'number' && value >= 0 ? value : defaultValue;\n}\n\nfunction validateOpacity(value: number): number {\n    // Ensure opacity is between 0 and 1\n    const numValue = typeof value === 'number' ? value : NaN;\n    if (isNaN(numValue)) {\n        // Decide a default if value is invalid - depends if it's start or end\n        // Returning 0 here, but could be context-dependent (like DEFAULTS.opacityStart/End)\n        return 0;\n    }\n    return Math.max(0, Math.min(1, numValue));\n}","'use client';\n\n// src/components/Animate.tsx\nimport React, { forwardRef, HTMLAttributes, JSX, ReactNode } from 'react';\nimport { useAnimation } from '@/hooks/useAnimation';\n\n\n// Animation types supported by the component\ntype AnimationType = 'fade' | 'slide' | 'scale' | 'rotate' | 'bounce';\n\n// Animation configuration interface\nexport interface AnimationConfig {\n  type: AnimationType;\n  duration?: number;\n  delay?: number;\n  easing?: string;\n  distance?: number;\n  degrees?: number;\n  scale?: number;\n  opacity?: {\n    start?: number;\n    end?: number;\n  };\n}\n\n// Props for the Animate component\ninterface AnimateProps extends HTMLAttributes<HTMLDivElement> {\n  children: ReactNode;\n  type: AnimationType;\n  duration?: number;\n  delay?: number;\n  easing?: string;\n  distance?: number;\n  degrees?: number;\n  scale?: number;\n  opacity?: {\n    start?: number;\n    end?: number;\n  };\n  as?: keyof JSX.IntrinsicElements | React.ComponentType<any>;\n  className?: string;\n  onAnimationComplete?: () => void;\n}\n\n/**\n * A wrapper component to easily apply animations using the useAnimation hook.\n * Supports forwarding refs and can render as any HTML element or component.\n *\n * @example\n * <Animate \n *   type=\"fade\" \n *   duration={0.5}\n *   className=\"my-custom-class\"\n * >\n *   <p>Content to animate</p>\n * </Animate>\n */\nexport const Animate = forwardRef<HTMLDivElement, AnimateProps>(\n  ({ \n    children, \n    as: Component = 'div', \n    className = '',\n    onAnimationComplete,\n    // Animation config props\n    type,\n    duration,\n    delay,\n    easing,\n    distance,\n    degrees,\n    scale,\n    opacity,\n    ...props \n  }, forwardedRef) => {\n    // Create animation config object from props\n    const animationConfig: AnimationConfig = {\n      type,\n      duration,\n      delay,\n      easing,\n      distance,\n      degrees,\n      scale,\n      opacity\n    };\n\n    // Use the animation hook\n    const { ref, key } = useAnimation<HTMLDivElement>(animationConfig);\n    \n    // Combine the refs\n    const setRefs = (element: HTMLDivElement | null) => {\n      // Set the local ref from useAnimation\n      if (typeof ref === 'object' && ref !== null) {\n        (ref as React.MutableRefObject<HTMLDivElement | null>).current = element;\n      }\n      \n      // Set the forwarded ref\n      if (forwardedRef) {\n        if (typeof forwardedRef === 'function') {\n          forwardedRef(element);\n        } else {\n          (forwardedRef as React.MutableRefObject<HTMLDivElement | null>).current = element;\n        }\n      }\n    };\n    \n    // Handle animation end event\n    const handleAnimationEnd = (e: React.AnimationEvent<HTMLDivElement>) => {\n      // Only trigger if it's the main animation ending, not child animations\n      if (e.target === ref.current) {\n        onAnimationComplete?.();\n      }\n      \n      // Call the original onAnimationEnd if provided in props\n      props.onAnimationEnd?.(e);\n    };\n    \n    // Create combined className\n    const combinedClassName = `animated ${className}`.trim();\n    \n    // Use createElement to properly handle the dynamic component type\n    return React.createElement(\n      Component,\n      {\n        ...props,\n        ref: setRefs,\n        className: combinedClassName,\n        key, // Key helps force re-animation\n        onAnimationEnd: handleAnimationEnd,\n        // Add data attributes for potential debugging/testing\n        'data-animation-type': type,\n        'data-animation-duration': duration ?? 0.5,\n        'data-animation-delay': delay ?? 0,\n      },\n      children\n    );\n  }\n);\n\nAnimate.displayName = 'Animate';\n\nexport default Animate;\n"]}