// mixins/_fade-mixins.scss
/**
 * Fade mixins
 *
 * @param {time} $duration - Duration of the animation (default: $fade-duration)
 * @param {string} $easing - Timing function (default: $fade-easing)
 * @param {time} $delay - Delay for the animation (default: $fade-delay)
 */
@mixin fade-in(
  $duration: $fade-duration,
  $easing: $fade-easing,
  $delay: $fade-delay
) {
  // Validation
  $duration: validate-value($duration, 'time', $fade-duration, 'fade-in $duration');

  // CSS custom properties for runtime configuration
  --fade-duration: #{$duration};
  --fade-easing: #{$easing};
  --fade-delay: #{$delay};
  --fade-opacity-start: #{$fade-opacity-start};
  --fade-opacity-end: #{$fade-opacity-end};

  // Animation
  animation: fadeIn var(--fade-duration) var(--fade-easing) var(--fade-delay) forwards;

  // Performance optimization
  will-change: opacity;

  // Accessibility
  @include respect-motion-preferences;
}

@mixin fade-out(
  $duration: $fade-duration,
  $easing: $fade-easing,
  $delay: $fade-delay
) {
  // Validation
  $duration: validate-value($duration, 'time', $fade-duration, 'fade-out $duration');

  // CSS custom properties
  --fade-duration: #{$duration};
  --fade-easing: #{$easing};
  --fade-delay: #{$delay};
  --fade-opacity-start: #{$fade-opacity-start};
  --fade-opacity-end: #{$fade-opacity-end};

  // Animation
  animation: fadeOut var(--fade-duration) var(--fade-easing) var(--fade-delay) forwards;

  // Performance optimization
  will-change: opacity;

  // Accessibility
  @include respect-motion-preferences;
}
